# 1. config 파일
#
# 프로젝트 설정 파일과 웹 서비스 실행을 위한 파일이 들어있음
# django-admin startproject 명령어를 사용해 프로젝트를 만들 때, 폴더 이름이 정해짐


#   - settings.py
#       프로젝트에 관련된 다양한 설정 파일
#       쟝고 기본 값 사용되며, 해당 기본 값들은 django/conf/global_settings.py 파일에 담겨 있음
#
#       - BASE_DIR : 프로젝트 루트 폴더, 설정 파일이나 py 파일 등에서 프로젝트의 루트 폴더를 찾아
#                   하위 탐색하는 일 수행
#                   변수로 미리 준비해 두는 값
#
#       - SECRET_KEY : 다양한 보안을 위해 사용
#                   세션 값의 보호 혹은 비밀번호 변경 시 사용되는 보안 URL을 만드는 등의 일에 주로 사용
#                   임의로 변경할 수 있으나 변경 시, 로그인이 풀리는 등의 부작용이 있음
#                   정해진 값이 외부에 노출되어서는 안됨
#
#       - DEBUG : 디버그 모드 설정
#               True일 경우 다양한 오류 메시지 즉시 확인 가능
#               실제 배포 시, False로 바꾸며 다른 설정 값을 이용해 관리자가 오류 메시지를 받도록 설정 가능
#
#       - ALLOWED_HOSTS : 현재 서비스의 호스트 설정
#                       개발 시 비워두고 사용하지만, 배포 시 '*' 이나 실제 도메인을 기록함
#                       '*' 사용보다 실제 도메인 권장
#                       DNS Rebinding을 막기 위한 조치
#                       쟝고 1.10.3 버전이 업데이트되는 시점부터 Debug 모드가 False일 때, ALLOWED_HOSTS 값이 공란일 경우
#                       서비스를 시작할 수 없음
#                       IP 주소 0은 0.0.0.0의 약어이며 해당 형태 동작 시 설정해야 함
#
#       - INSTALLED_APPS : 현재 프로젝트에서 사용하는 앱의 목록을 기록하고 관리
#
#       - MIDDLEWARE : 쟝고의 모든 요청/응답 메시지 사이에 실행되는 특수한 프레임워크
#
#       - ROOT_URLCONF : 기준이 되는 urls.py 파일의 경로 설정
#
#       - TEMPLATES : 쟝고에서 사용하는 템플릿 시스템에 관한 설정
#                   템플릿 해석 엔진과 템플릿 폴더의 경로 등을 변경하는 데 쓰임
#
#       - WSGI_APPLICATEION : 실행을 위한 WSGI 어플리케이션 설정
#
#       - DATABASES : DB 관련 설정
#
#       - AUTH_PASSWORD_VALIDATORS : 비밀번호 검증을 위한 설정
#                                   기본적으로 들어있는 검증 규칙은 사용자 정보와 유사한지, 숫자로만 구성되어있는지, 너무 짧은지,
#                                   평범한 비밀번호인지 검증하게 되어 있음
#
#       - LANGUAGE_CODE : 다국어에 관한 설정
#
#
#   - wsgi.py : WSGI 어플리케이션 구동을 위해 사용되는 파일
#           실제 웹 서버와 쟝고 어플리케이션 사이의 통신 역할 담당
#
#           - WSGI : Web Server Gateway Interface 약어
#                   Nginx나 Apache 같은 서버 컴퓨터에서 사용자(웹 브라우저)의 요청을 받아 처리해주는 역할
#                   웹 서버가 사용자의 역할을 적절하게 해석하여 쟝고로 구동되고 있는 웹 서비스에 전달을 해주는 중간 역할
#
#                   CGI(Common Gateway Interface) 의 구조 상 속도가 느리고 리소스가 많이 필요한 단점을 보완하기 위해
#                   Fast CGI 로 발전을 거듭하고, mod_php, mod_python 같은 아파치 모듈 형태의 프로그램이 등장함
#                   mod_python의 구동 중 종료되는 등 불안정한 프로그램이었기 때문에 이를 보완한 WSGI 가 등장함
#
#                   기존의 포크(Fork) 방식이 아닌 다양한 방식으로 빠르게 동작하고 적은 리소스 사용함
#                   웹 서버 프로그램과 웹 어플리케이션 사이의 미들웨어처럼 동작하며 웹 서버는 요청이 있을 경우 정보와 콜백 함수를 WSGI에 전달함
#                   이 정보를 해석하여 쟝고 웹 어플리케이션에 전달하고 파이썬 스크립트를 이용해 정보를처리하고 끝낸 결과를 다시 WSGI에 전달함
#                   이 정보를 콜백 함수를 이용해 웹 서버에 다시 전달함


# 2. venv 파일
#
# 프로젝트 구동에 필요한 가상환경이 들어있는 폴더
# 임의로 변경하지 않는 것이 좋음


# 3. db.sqlite3 파일
#
# SQLite3 DB 파일
# SQLite DB를 사용할 경우 임의로 삭제하거나 위치 이동하면 안됨
# 다른 DB로 변경 시 필요없는 파일
# 아래의 4가지 사용 가능, 또한 다른 데이터베이스도 사용 가능
#     - django.db.backends.sqlite3
#     - django.db.backends.postgresql
#     - django.db.backends.mysql
#     - django.db.backends.orcle


# 4. manage 파일
#
# 쟝고의 다양한 명령어를 실행하기 위한 파일
# 임의로 변경하지 않는 것이 좋음

